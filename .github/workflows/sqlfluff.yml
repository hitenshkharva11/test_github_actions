name: "SQLFluff lint"

on:
  - workflow_call

jobs:
  sqlfluff-lint-models:
    name: Lint dbt models using SQLFluff
    runs-on: ubuntu-latest

    env:
      # DBT env variables
      DBT_PROFILES_DIR: .github/workflows/sqlfluff
      DBT_ENV_NAME: "ci"
      DBT_ENABLE_ARTIFACTS: false
      DBT_DB_ROLE: "DBT_ADMIN_ROLE"
      DBT_PROJECT_EVALUATOR_SEVERITY: "warn"
      DBT_ENABLE_PROJECT_EVALUATOR: "False"
      DBT_SOURCE: "DEV"
      DBT_SOURCE_SCHEMA: "AV_DEV_PLANS"

      # SPECIFY database connection credentials as env vars below.
      # Env var values to be fetched from as GitHub Secrets.

      # IF USING SNOWFLAKE, workflow will use these in dummy profiles.yml (else, ignored)
      PROFILES_YML_SNOWFLAKE_ACCOUNT: "kx66005"
      PROFILES_YML_SNOWFLAKE_USER: "HKHARVA"
      PROFILES_YML_SNOWFLAKE_PASSWORD: "QwPoZxMn@2"
      PROFILES_YML_SNOWFLAKE_ROLE: "ENT_DEVELOPER_ROLE"
      PROFILES_YML_SNOWFLAKE_DATABASE: "DEV_DWH"
      PROFILES_YML_SNOWFLAKE_WAREHOUSE: "COMPUTE_WH"

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Install Python packages
        # NB: This is referencing the requirements.txt file saved in the ci_cd folder in your project.
        run: |
            apt-get update
            apt-get install -y python3-pip
            python -m pip install -r .github/workflows/sqlfluff/requirements.txt
        
      - name: Install dbt packages
        run: dbt deps

      - name: Test database connection
        run: dbt debug

      # - name: Get changed files
      #   id: get_file_changes
      #   uses: trilom/file-changes-action@v1.2.4
      #   with:
      #     output: ' '
      
      # - name: Get new and changed .sql files in /models to lint
      #   id: get_files_to_lint
      #   shell: bash -l {0}
      #   run: |
      #     # Set the command in the $() brackets as an output to use in later steps
      #     echo "lintees=$(
      #     # Issue where grep regular expressions don't work as expected on the
      #     # Github Actions shell, check dbt/models/ folder
      #     echo \
      #     $(echo ${{ steps.get_file_changes.outputs.files_modified }} |
      #     tr -s ' ' '\n' |
      #     grep -E '^models.*[.]sql$' |
      #     tr -s '\n' ' ') \
      #     $(echo ${{ steps.get_file_changes.outputs.files_added }} |
      #     tr -s ' ' '\n' |
      #     grep -E '^models.*[.]sql$' |
      #     tr -s '\n' ' ')
      #     )" >> $GITHUB_OUTPUT

      # - name: Lint dbt models
      #   if: steps.get_files_to_lint.outputs.lintees != ''
      #   shell: bash -l {0}
      #   run: |
      #     sqlfluff lint --format github-annotation --annotation-level failure --nofail ${{ steps.get_files_to_lint.outputs.lintees }} --write-output annotations.json
      
      # # This step forces the presence of an empty annotations file in the case
      # # that no sql files have been edited, so that the required CI check is still
      # # present [but contains no issues].
      # - name: Force pass because no SQL edited.
      #   if: steps.get_files_to_lint.outputs.lintees == ''
      #   shell: bash -l {0}
      #   run: |
      #     echo "[]" > annotations.json
               
      # - name: Annotate
      #   uses: yuzutech/annotations-action@v0.3.0
      #   with:
      #     repo-token: "${{ secrets.GITHUB_TOKEN }}"
      #     title: "Annotate SQLFluff Lint Errors"
      #     input: "./annotations.json"
